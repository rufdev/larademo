<script setup lang="ts">
import { DropDownAction, EntityFilter, EntityPagination, EntityTable, ReusableAlertDialog } from '@/components/entitycomponent';
import AppLayout from '@/layouts/AppLayout.vue';
import { Head, router } from '@inertiajs/vue3';
import type { ColumnDef, ColumnFiltersState, ExpandedState, SortingState, VisibilityState } from '@tanstack/vue-table';
import {
    getCoreRowModel,
    getExpandedRowModel,
    getFilteredRowModel,
    getPaginationRowModel,
    getSortedRowModel,
    useVueTable,
} from '@tanstack/vue-table';
import { toTypedSchema } from '@vee-validate/zod';
import axios from 'axios';
import { ArrowUpDown } from 'lucide-vue-next';
import { useForm } from 'vee-validate';

import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { DropdownMenu, DropdownMenuCheckboxItem, DropdownMenuContent, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';
import { valueUpdater } from '@/components/ui/table/utils';
import { BreadcrumbItem } from '@/types';
import { ChevronDown, Plus } from 'lucide-vue-next';
import { h, ref } from 'vue';
import { toast } from 'vue-sonner';

import { AutoForm } from '@/components/ui/auto-form';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import * as z from 'zod';

export interface Category {
    id: number;
    name: string;
    description: string;
}

const props = defineProps({
    items: {
        type: Object,
        required: true,
    },
});

const columns: ColumnDef<Category>[] = [
    {
        id: 'select',
        header: ({ table }) =>
            h(Checkbox, {
                modelValue: table.getIsAllPageRowsSelected() || (table.getIsSomePageRowsSelected() && 'indeterminate'),
                'onUpdate:modelValue': (value) => table.toggleAllPageRowsSelected(!!value),
                ariaLabel: 'Select all',
            }),
        cell: ({ row }) =>
            h(Checkbox, {
                modelValue: row.getIsSelected(),
                'onUpdate:modelValue': (value) => row.toggleSelected(!!value),
                ariaLabel: 'Select row',
            }),
        enableSorting: false,
        enableHiding: false,
    },
    {
        accessorKey: 'name',
        header: ({ column }) => {
            return h(
                Button,
                {
                    variant: 'ghost',
                    onClick: () => column.toggleSorting(column.getIsSorted() === 'asc'),
                },
                () => ['Name', h(ArrowUpDown, { class: 'ml-2 h-4 w-4' })],
            );
        },
        cell: ({ row }) => h('div', { class: 'capitalize' }, row.getValue('name')),
    },
    {
        accessorKey: 'description',
        header: 'Description',
        cell: ({ row }) => h('div', { class: 'capitalize' }, row.getValue('description')),
    },
    {
        id: 'actions',
        enableHiding: false,
        cell: ({ row }) => {
            const category = row.original;

            return h(
                'div',
                { class: 'relative' },
                h(DropDownAction, {
                    category,
                    onEdit: handleEdit,
                    onDelete: openDeleteDialog,
                }),
            );
        },
    },
];

const sorting = ref<SortingState>([]);
const columnFilters = ref<ColumnFiltersState>([]);
const columnVisibility = ref<VisibilityState>({});
const rowSelection = ref({});
const expanded = ref<ExpandedState>({});
const pageSizesOptions = [5, 10, 20, 30];

const data = ref(props.items.data);

const pagination = ref({
    pageIndex: props.items.meta.current_page - 1,
    pageSize: props.items.meta.per_page,
});
const table = useVueTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    getExpandedRowModel: getExpandedRowModel(),
    onSortingChange: (updaterOrValue) => valueUpdater(updaterOrValue, sorting),
    onColumnFiltersChange: (updaterOrValue) => valueUpdater(updaterOrValue, columnFilters),
    onColumnVisibilityChange: (updaterOrValue) => valueUpdater(updaterOrValue, columnVisibility),
    onRowSelectionChange: (updaterOrValue) => valueUpdater(updaterOrValue, rowSelection),
    onExpandedChange: (updaterOrValue) => valueUpdater(updaterOrValue, expanded),
    state: {
        get sorting() {
            return sorting.value;
        },
        get columnFilters() {
            return columnFilters.value;
        },
        get columnVisibility() {
            return columnVisibility.value;
        },
        get rowSelection() {
            return rowSelection.value;
        },
        get expanded() {
            return expanded.value;
        },
        get pagination() {
            return pagination.value;
        },
    },
    rowCount: props.items.meta.total,
    manualPagination: true,
    onPaginationChange: (updater) => {
        const newState = typeof updater === 'function' ? updater(pagination.value) : updater;
        pagination.value = newState;
        fetchPage(pagination);
    },
});

const breadcrumbs: BreadcrumbItem[] = [
    {
        title: 'Categories',
        href: '/categories',
    },
];

const showDialogForm = ref(false);
const mode = ref('create');
const categoryId = ref<number | null>(null);

const resetForm = () => {
    form.resetForm();
    categoryId.value = null;
};

const handleOpenDialogForm = () => {
    showDialogForm.value = true;
    mode.value = 'create';
};

const schema = z.object({
    name: z
        .string({
            required_error: 'Name is required',
            invalid_type_error: 'Name must be a string',
        })
        .toUpperCase()
        .min(3, {
            message: 'Name must be at least 3 characters long',
        }),
    description: z.string().toUpperCase().optional(),
});

const fieldconfig: any = {
    name: {
        label: 'Name',
        inputProps: {
            type: 'text',
            class: 'uppercase',
        },
        description: 'Name of the category',
    },
    description: {
        label: 'Description',
        component: 'textarea',
        inputProps: {
            class: 'uppercase',
            placeholder: 'Enter category description',
        },
    },
};

const form = useForm({
    validationSchema: toTypedSchema(schema),
    initialValues: {
        // Set initial values for the form fields
        name: '',
        description: '',
    },
});

const onSubmit = async (values: any) => {
    try {
        if (mode.value === 'create') {
            // Create a new category
            await axios.post('/categories', values);
            toast.success('Category created successfully.');
        } else if (mode.value === 'edit') {
            // Update an existing category
            await axios.put(`/categories/${categoryId.value}`, values);
            toast.success('Category updated successfully.');
        }

        resetForm(); // Reset the form after success
        fetchPage(pagination); // Reload the table (if applicable)
        showDialogForm.value = false; // Close the dialog
    } catch (error: any) {
        console.log(error);
        if (error.response && error.response.status === 422) {
            // errors.value = error.response.data.errors; // Assign validation errors
            form.setErrors(error.response.data.errors);
            toast.error('Validation failed. Please check your input.');
        } else {
            toast.error('An unexpected error occurred.');
        }
    }
};

const fetchPage = (newpagination: any) => {
    router.get(
        '/categories',
        { page: newpagination.value.pageIndex + 1, per_page: newpagination.value.pageSize },
        {
            preserveState: true,
            preserveScroll: true,

            onSuccess: (pageData: any) => {
                data.value = pageData.props.items.data;
                pagination.value.pageIndex = pageData.props.items.meta.current_page - 1;
                pagination.value.pageSize = pageData.props.items.meta.per_page;
            },
        },
    );
};

const handleEdit = async (id: number) => {
    try {
        // Show the dialog form and set the mode to 'edit'

        mode.value = 'edit';
        categoryId.value = id;
        // Make an Axios request to fetch the category data
        const response = await axios.get(`/categories/${id}`);
        // Populate the form with the retrieved data
        form.setValues(response.data);
        console.log(form.values);
        showDialogForm.value = true;
    } catch (error) {
        console.error('Error fetching category:', error);
        toast.error('Failed to fetch category data.');
    }
};

const showDeleteDialog = ref(false); // Controls the visibility of the dialog
const categoryIdToDelete = ref<number | null>(null); // Stores the ID of the category to delete

const openDeleteDialog = (id: number) => {
    categoryIdToDelete.value = id; // Set the ID of the category to delete
    console.log('Opening delete dialog for category ID:', id);
    showDeleteDialog.value = true;
    console.log('showDeleteDialog:', showDeleteDialog.value);
};

const handleDelete = async () => {
    try {
        // Confirm deletion with the user
        // const confirmed = confirm('Are you sure you want to delete this category?');
        if (!categoryIdToDelete.value) return;

        // Make an Axios DELETE request to delete the category
        await axios.delete(`/categories/${categoryIdToDelete.value}`);

        // Show a success message
        toast.success('Category deleted successfully.');

        // Reload the table or fetch the updated data
        fetchPage(pagination);
        
        showDeleteDialog.value = false;
    } catch (error) {
        console.error('Error deleting category:', error);
        toast.error('Failed to delete category. Please try again.');
    }
};
</script>

<template>
    <Head title="Categories" />
    <AppLayout :breadcrumbs="breadcrumbs">
        <div class="flex h-full flex-1 flex-col gap-4 rounded-xl p-4">
            <div class="flex items-center gap-2 py-4">
                <EntityFilter
                    :filterValue="table.getColumn('name')?.getFilterValue() as string"
                    placeholder="Filter categories..."
                    @filter="(value: any) => table.getColumn('name')?.setFilterValue(value)"
                />
                <div class="ml-auto flex items-center gap-2">
                    <Button class="bg-sky-300" @click="handleOpenDialogForm"> <Plus class="h-4"></Plus> Create Category</Button>
                    <DropdownMenu>
                        <DropdownMenuTrigger as-child>
                            <Button variant="outline" class="ml-auto"> Columns <ChevronDown class="ml-2 h-4 w-4" /> </Button>
                        </DropdownMenuTrigger>
                        <DropdownMenuContent align="end">
                            <DropdownMenuCheckboxItem
                                v-for="column in table.getAllColumns().filter((column) => column.getCanHide())"
                                :key="column.id"
                                class="capitalize"
                                :model-value="column.getIsVisible()"
                                @update:model-value="
                                    (value: any) => {
                                        column.toggleVisibility(!!value);
                                    }
                                "
                            >
                                {{ column.id }}
                            </DropdownMenuCheckboxItem>
                        </DropdownMenuContent>
                    </DropdownMenu>
                </div>
            </div>
            <EntityTable :table="table" :columns="columns" />
            <EntityPagination
                :pagination="pagination"
                :pageSizeOptions="pageSizesOptions"
                :selectedRows="table.getFilteredSelectedRowModel().rows.length"
                :totalRows="table.getFilteredRowModel().rows.length"
                :totalEntities="table.getRowCount()"
                :table="table"
                @updatePageSize="(value: any) => table.setPageSize(value)"
                @goToFirstPage="() => table.setPageIndex(0)"
                @goToPreviousPage="() => table.previousPage()"
                @goToNextPage="() => table.nextPage()"
                @goToLastPage="() => table.setPageIndex(table.getPageCount())"
            />

            <Dialog v-model:open="showDialogForm">
                <DialogContent class="sm:max-w-[425px]">
                    <DialogHeader>
                        <DialogTitle>{{ mode === 'create' ? 'Create' : 'Update' }} Category</DialogTitle>
                    </DialogHeader>
                    <DialogDescription> Use this form to edit the category details. </DialogDescription>
                    <AutoForm class="space-y-6" :form="form" :schema="schema" :field-config="fieldconfig" @submit="onSubmit">
                        <DialogFooter>
                            <Button type="submit" class="bg-green-300">
                                {{ mode === 'create' ? 'Create' : 'Update' }}
                            </Button>
                        </DialogFooter>
                    </AutoForm>
                </DialogContent>
            </Dialog>

            <ReusableAlertDialog
                :open="showDeleteDialog"
                title="Delete Category"
                description="Are you sure you want to delete this category? This action cannot be undone."
                @confirm="handleDelete"
                @cancel="showDeleteDialog = false"
            />
        </div>
    </AppLayout>
</template>
